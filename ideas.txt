I changed my mind, arrays will be separate from dicts/objects.
They will have very slight differences, and you can switch between them with functions.

Order of precedence of statements and operations:
  if/else, for, while, try, func(){}
  break, continue, return, yield, raise
  ;
  =, +=, -=, *=, /=, \%=, //=, **=, &=, |=, ^=, >>=, <<=
  ,
  ->
  y if x else z, x?y:z
  &&, ||, and, or, nand, nor, xor, xnor
  is, not is, in, not in, ?=, !=, >, <, >=, <=
  not
  ??
  +, -
  *, /, \%, //
  **
  &, |, ^, >>, <<
  ~, !, ?, ++, --, *x
  ..
  ::, .
  x(), x[], (){}

Code blocks:
  A code block is defined as a group of statements executed together.
  Like everything else, a code block can be used as an expression, and it evaluates to null.
  A code block can be created with multiple statements on one line separated by semicolons, as well as braces and indentation.

Multiline statements:
  A multiline statement is a function definition, if, for, while, try, etc.
  Parentheses are not needed on the variable/expression part following the keyword.
  Multiline statement "heads" can follow others on the same line for easy nesting.
  The following algorithm is used to recognize the code block part of a multiline statement:
    On some multiline statements like "else", you can use a colon or not, and the next recognized statement or code block in the code is used.
    If there is a keyword for another multiline statement following the expression, use that statement.
    If the line ends after the expression, or if there is a colon following the expression, use the next recognized statement or code block.
    Else if there is an opening brace after the expression, use that code block.
    Else, throw an error.



for key:value in collection: {}
for :value in collection {}
for key: in collection {}
for collection: {}

try e:
  # error stuff
no except/catch block
if there is an error it will break out of try and assign the error to e

for i:v in collection for j: in i if i and j try e:
  # that is nested multiline statement heads


where m="whatever" {
  # created local variable m
}

print(m) where m = "whatever"

it may be advisable to output tokens as bytes so as to reduce the usage of strequals the evil one, then read code byte by byte until a named string happens, at which point we read that into memory. This would likely be difficult to implement though so who knows